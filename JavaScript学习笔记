# Javascript 学习笔记
>##一.前端开发概论
####1.一个传统的html页面由：html，css，javascript组成
* html：超文本标记语言
* css：叠层样式表
* javascript：一门轻量级的脚本编程语言
####2.常用的开发工具(IDE)
* Dreanweaver
* Sublime
* HBuild
* Eclipse
* vs2014
* WebStorm(推荐)
>##二.JS引入到页面中的方式和细节
####1.行内引入
* 示例：
``` javascript
    onclick=“alert(‘welcome to beijing！’)”
```
* `不推荐用这种方式，因为安全系数比较低`
####2.内嵌式
* 示例:

``` javascript
    <script type="text/javascript">
        alert("welcome to beijing");
    </script>
```
* 内嵌式：将js代码写在script脚本块中间
####3.外链式
* 示例：
``` javascript
    <script type="text/javascript src="js/index.js"></script>"
```
* 注意：在外链式中，script脚本块中间不可以写js代码，写了也不会执行
####4.细节
* 我们通常将js代码放在body的最后面，因为html页面是从上到下加载的，js通常是获取html标签给予动态操作效果的，所以需要先加载html标签再加载js
>##三.JS中常用的几种输出方式
####1.alert("内容")
* 在浏览器中弹框输出显示"内容"
####2.document.write("内容")
* 在页面中输出显示"内容"
####3.console.log("内容")
* 在控制台输出显示"内容"(最常用的一种方式)
* F12打开控制台在console的页卡中查看输出的内容
* console.dir：比console.log在控制台输出的详细一些
####4.innerHTML/innerText
* 向指定元素中动态添加内容
>##四.JS的组成和命名规范
####1.js的组成
* ECMAScript：定义了js里面的命名规范，变量，数据类型，基本语法，操作语句等最核心的东西
* DOM：document object model 文档对象模型
* BOM:browser object model 浏览器对象模型
####2.命名规范
* js中严格区分大小写
* 使用驼峰命名法：首字母小写，其余每个有意义的单词首字母大写,可以使用数字，字母，下划线，$(数字不能作为首位)
* 不能使用关键字(在js中有特殊意义的字)和保留字(未来可能成为关键字的)
>##JS中的变量和数据类型
####1.变量
* js中的变量是一个抽象的概念，是用来存储值和代表值的
* js中定义一个变量非常简单：var 变量名=变量值
* =是赋值操作，左边是变量名，右边是存储的值
* js中的变量是松散类型的：通过一个var变量名就可以存储任何的数据类型
####2.数据类型
* js中的数据类型分类：基本数据类型，引用数据类型
* 基本数据类型：数字(number),字符串(string),布尔(boolean),null,undefined
* 引用数据类型:对象数据类型(object),函数数据类型(function)
####3.number数据类型
* number数据类型包括：正数，负数，0，小数，NaN
* NaN：not a number 不是一个有效数字，但是他属于number数据类型
* =是赋值操作，==是判断左右两边是否相等
* 注意：NaN==NaN 是不相等的
* isNaN()：检测一个值不是有效数字的命题是否成立，是有效数字返回false，不是有效数字返回true，如果检测的值不是number类型的，浏览器会默认把它转换为number类型，然后再进行判断
* Number()：强制将其他的数据类型转换为number类型，如果是字符串，字符串中一定都需要是数字才可以转换
* parseInt()：非强制数据类型转换，从左到右，把是数字的转换为有效数字，中途如果遇到非有效数字，就不再进行查找了
* parseFloat()：和parseInt()一样，但是他可以多识别一个小数点
####4.boolean数据类型
* boolean包含两种：true和fase
* ！：一个叹号是取反，首先将值转换为布尔类型，然后取反
* ！！：将其他数据类型转换为boolean类型，相当于Boolean()
####5.数据类型转换规律
* 如果只有一个值，判断这个值是真还是假遵循：只有0，NaN，"",null,undefined这五个是假的，其余都是真的
* 如果是两个值比较是否相等则遵循：val1==val2，两个值可能不是一个类型数据，如果是==比较的话，会进行默认的数据类型转换
* 对象==对象，永远不相等
* 对象==字符串，先将对象转换为字符串(调用toString的方法)，然后再进行比较,[]转换为字符串就是"",{}转换为字符串"[object Object]"
* 对象==布尔类型，对象先转换为字符串(toString),然后再转换为数字(Number),布尔类型也转换为数字(true是1，false是0)，然后让两个数字比较
* 对象==数字，对象先转换为字符串(toString),然后再转换为数字(Number)，然后再进行比较
* 数字==布尔，布尔转换为数字再进行比较
* 数字==字符串，字符串转换为数字再进行比较
* 字符串==布尔，都转换为数字再进行比较
* null==undefined，结果是true
* null或者undefined和其他任何数据类型比较都不相等
* ==是比较，===也是比较(绝对比较)，如果数据类型不一样，肯定不相等
####6.object数据类型
* 由多组属性名和属性值组成，即多组键值对，或者多个key:value
* 属性名和属性值是用来描述这个对象特征的
* var obj={name:"beijing"};字面量创建方式
* var obj=new Object();实例创建方式
* obj.name="beijing";obj["name"]="beijing";给一个对象增加一组属性名和属性值，这两种方式是一样的
* obj.name="beijingnihao";obj["name"]="beijingnihao";修改原有属性名的属性值，规定一个对象的属性名不能重复，如果之前有就是修改，没有就是增加
* console.log(obj["name"]);console.log(obj.name);获取属性名的属性值，如果属性名不存在，默认返回的结果是undefined
* obj.name=null;删除属性名和属性值(假删除)
* delete obj.name; 删除属性名和属性值(真删除)
* 对象数据类型中，还可以具体的细分为：对象类(Object)，数组类(Array)，正则类(RegExp)，时间类(Date),字符串类(String), 数学函数(Math)
* js中对象，类，实例的区别：对象是泛指，js中万物皆对象，类是对对象具体的细分，实例是类中的一个具体的事物，举个例子:自然界中万物皆对象，所有的东西可以分为：人类，植物类，动物类等等，这其中每个人都是人类中的一个具体的实例
>##JS中数据类型的区分和数据类型的检测
####1.基本数据类型和引用数据类型的区别
* 基本数据类型是把值直接给了变量，接下来在操作过程中，直接拿这个值操作，可能两个变量存储的值是一样的，但是互相之间是没有任何关系的，其中一个改变另外一个没有任何影响
* 引用数据类型：定义一个变量，然后开辟一个新的空间，然后把属性名和属性值保存在这个空间中，并且产生了一个空间地址，然后把这个地址给了这个变量，变量并没有储存这个数值而是这对这个空间的引用地址，接下来把这个空间地址给了另外一个变量，另外一个变量储存的也是这个地址，此时两个变量操作的是同一个空间，所以其中一个变量改变，另一个也会跟着改变
* 基本数据类型和引用数据类型最本质的区别就是：基本数据类型操作的是值，而引用数据类型操作的是对新空间的引用地址
####2.js中检测数据类型的方式
* typeof运算符
* instanceof运算符
* constructor
* Object.prototype.toString.call()
####3.typeof检测数据类型
* typeof 要检查的值，返回值:是一个字符串，包含了数据类型字符"numben","string","boolean","undefined","object","function"
* typeof nulld的结果是"object"
* typeof的局限性：不能具体的检查object下细分的类型，检查这些返回的都是"object"
* 出现两个和两个以上typeof的时候，最终结果都是"string"
>##JS中的三个判断的语法
####1. 三个判断：if else，三元运算符，switch case
* if,else if,else是最常用的判断，可以解决js中的所有判断需求
* 三元运算符应用于简单的if else情况
* switch case应用于不同值情况下的不同操作
####2.if else
* if else基本语法：
```javascript
/*if(条件1){
    执行条件1成立的js代码
}else if(条件2){
    执行条件2成立的js代码
}else if(条件3){
    执行条件3成立的js代码
}...
else{
    以上所有条件都不成立执行的代码
}*/
```
* 举例：
```javascript
var num=10;
if (num<0){
    console.log("负数")
}else if(num>=0 && num<=10){
    console.log("0-10之间");
}else if (num>10){
    console.log("10以上");
}
```
* if中的条件可以是小于，大于，等于，还可以是一个值(判断当前值是真还是假)
* if中的条件还可以是多个小的条件组合，中间用//(只要有一个为真整体就为真)和&&(所有的小条件都为真整体才为真)隔开
####3.三元运算符
* 语法：条件?条件执行：条件不成立执行
* 举例：
```javascript
num>=0?console.log("正数或零"):console.log("负数");
```
* 当只有一个条件时的写法：
```javascript
num>=0?console.log("正数或零"):void 0;
```
####4.switch case
* 语法:每一种case情况下都要加break，如果不加break，不管后面的代码是否成立都会执行
* 举例：
```javascript
var num=10;
switch(num){
    case 0:
        console.log("0");
        break;
    case 5:
        console.log("5");
        break;
    case 10:
        console.log("10");
        break;
    default:
        console.log("NaN");
}
```
* 每一种case情况都相当于===的比较，一定要注意数据类型是否一致
>##JS中判断的应用
####1.开关灯效果
* 每一次点击的时候都要先获取当前的背景颜色
* 元素.style.backgroundColor 获取当前元素在"行内样式上"的背景颜色
* 举例：
``` javascript
<html>
<head>
    <meat charset="UTF-8"
    <title></title>
    <style type="text/css">
        html,body{
            margin:0;
            padding:0;
            width:100%;
            height:100%;
            cursor:pointer;
         }
     </style>
</head>
<body id="bodyEle" style="blackgrould-color:white>

    <script type="text/javascript">
    var oBody=document.getElementById("bodyEle")
    oBody.onclick=function(){
        var bg=this.style.backgroundColor;
        if(bg==="white"){
           this .style.backgroundColor="black";
        }else{
            this.style.backgroundColor="white"
        }
    }
    </script>
</body>
</html>
```
* 在绑定事件中，this就是当前我们点击的这个元素oBody
* 用三元运算符替代这段代码为：
``` javascript
bg==="white"?this.style.backgroundColor="black":this.style.backgroundColor="white"
```
* 用switch case替代这段代码为：
``` javascript
switch(bg){
    case"white":
      this.style.backgroundColor="black";
      break;
    default:
      this.style.backgroundColor="white";
    
}
```
>##JS中的三个循环
####1.for循环
* for循环四部曲：设置初始值;设置循环执行条件；执行循环体中的内容；执行每一轮循环完成之后都执行我们的i++累加操作
* 举例：
``` javascript
for(var i=0;i<10;i++{
    console.log(i)
}
```
* break：在循环体中，出现break，整个循环就直接结束了，最后的累加操作也不再执行
* continue：在循环体中，出现continue，当前这一轮的循环就结束了，继续下一轮的循环，最后的累加操作继续执行
* 在循环体中遇到这两个关键字，循环体中后面的代码就不执行了
####2.for in循环
* for in循环：用来循环一个对象中的属性名和属性值的
* 对象中有多少组键值对就循环多少次
* 在for in中，只能通过对象名[key]来获取属性值
* 顺序问题：首先循环数字的属性名(按照从小到大)，再把剩下的属性名按照我们写的顺序循环
####3.for循环的应用
* i的值是奇数代表偶数行，i的值是偶数代表奇数行
* i%2：i除以2取余数
>##JS中的function数据类型
####1.函数的组成
* 相当于一个方法或者一个功能
* functionfn(){}：定义一个函数，大括号中的就是函数体，即一个功能或一个方法实现的步骤
* 定义一个函数的步骤：开辟一个新的空间地址，把函数体中的js代码当作字符串存到空间中(一个函数如果只是定义了，并没有执行的话，这个函数没有任何意义)，再把这个空间地址给这个函数名
* 形参：小括号中的量(可以理解为一个变量)，通过参数的不同实现不同的功能(一个功能的多种形态)
* 形参的作用：实现一个功能，发现部分原材料没有，在制定计划的时候我们没有办法获取，我们就把需要的原材料定义在我们的形参上，在执行计划的时候，把原材料提供就好了
* 定义一个形参变量，执行的时候没有传递值，那默认值是undefined
* fn()：执行这个函数，首先会形成一个私有地盘，然后把定义的时候，存在空间的js代码字符串当作代码执行
####2.函数的基本应用
* 在js中function的一个特别大的作用：将实现一个功能的代码进行封装，以后如果用到了这个功能，代码没有必要重新写了，只需要执行这个方法就好了(封装)
* 用typeof检查形参是否有传递进来值
* arguments：函数内置接收参数的机制(天生自带的，不管你是否传递了参数，也不管有是否写形参，arguments一直存在)
* arguments也是一个类数组(有数字作为索引，索引从0开始代表第几个传递的参数，还有一个length的属性，代表传递了多少个参数 )
* callee：arguments.callee代表的就是当前函数的本身
* arguments获取其中的某一个只能用arguments[索引]，不能用.item()
* 函数执行的时候，会形成一个私有的地盘(函数里面定义的变量，在外面不能直接使用)
* 闭包：函数执行的时候会形成一个新的私有的作用域，来保护里面的变量不受外界的干扰，我们把这种保护机制叫做闭包
* 在外面想用什么 在函数里直接return返回就可以了，函数执行完成的整体就是这个值
* 如果没有写return(或者return；)的话，默认的返回结果是undefined
* 在函数体中，return后面的代码不再执行
* return的第二个作用：控制函数体中的代码执行到指定位置就结束
####3.匿名函数
* 函数表达式：把一个匿名函数的定义部分当作一个值赋值给一个变量或者一个元素的事件
* 举例：var fn=function(){}
####4.自执行函数
* 定义和执行一起完成
* 格式：(function(){}());~function(){}();!function(){}();+function(){}();-function(){}();


